// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the protorev module's genesis state.
type GenesisState struct {
	// Parameters for the protorev module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Token pair arb routes for the protorev module (hot routes).
	TokenPairArbRoutes []TokenPairArbRoutes `protobuf:"bytes,2,rep,name=token_pair_arb_routes,json=tokenPairArbRoutes,proto3" json:"token_pair_arb_routes" yaml:"token_pair_arb_routes"`
	// The base denominations being used to create cyclic arbitrage routes via the
	// highest liquidity method.
	BaseDenoms []BaseDenom `protobuf:"bytes,3,rep,name=base_denoms,json=baseDenoms,proto3" json:"base_denoms" yaml:"base_denoms"`
	// The pool weights that are being used to calculate the weight (compute cost)
	// of each route.
	PoolWeights PoolWeights `protobuf:"bytes,4,opt,name=pool_weights,json=poolWeights,proto3" json:"pool_weights" yaml:"pool_weights"`
	// The number of days since module genesis.
	DaysSinceModuleGenesis uint64 `protobuf:"varint,5,opt,name=days_since_module_genesis,json=daysSinceModuleGenesis,proto3" json:"days_since_module_genesis,omitempty" yaml:"days_since_module_genesis"`
	// The fees the developer account has accumulated over time.
	DeveloperFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=developer_fees,json=developerFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"developer_fees" yaml:"developer_fees"`
	// The latest block height that the module has processed.
	LatestBlockHeight uint64 `protobuf:"varint,7,opt,name=latest_block_height,json=latestBlockHeight,proto3" json:"latest_block_height,omitempty" yaml:"latest_block_height"`
	// The developer account address of the module.
	DeveloperAddress string `protobuf:"bytes,8,opt,name=developer_address,json=developerAddress,proto3" json:"developer_address,omitempty" yaml:"developer_address"`
	// Max pool points per block i.e. the maximum number of compute time (in ms)
	// that protorev can use per block.
	MaxPoolPointsPerBlock uint64 `protobuf:"varint,9,opt,name=max_pool_points_per_block,json=maxPoolPointsPerBlock,proto3" json:"max_pool_points_per_block,omitempty" yaml:"max_pool_points_per_block"`
	// Max pool points per tx i.e. the maximum number of compute time (in ms) that
	// protorev can use per tx.
	MaxPoolPointsPerTx uint64 `protobuf:"varint,10,opt,name=max_pool_points_per_tx,json=maxPoolPointsPerTx,proto3" json:"max_pool_points_per_tx,omitempty" yaml:"max_pool_points_per_tx"`
	// The number of pool points that have been consumed in the current block.
	PointCountForBlock uint64 `protobuf:"varint,11,opt,name=point_count_for_block,json=pointCountForBlock,proto3" json:"point_count_for_block,omitempty" yaml:"point_count_for_block"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c77fc2da5752af2, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetTokenPairArbRoutes() []TokenPairArbRoutes {
	if m != nil {
		return m.TokenPairArbRoutes
	}
	return nil
}

func (m *GenesisState) GetBaseDenoms() []BaseDenom {
	if m != nil {
		return m.BaseDenoms
	}
	return nil
}

func (m *GenesisState) GetPoolWeights() PoolWeights {
	if m != nil {
		return m.PoolWeights
	}
	return PoolWeights{}
}

func (m *GenesisState) GetDaysSinceModuleGenesis() uint64 {
	if m != nil {
		return m.DaysSinceModuleGenesis
	}
	return 0
}

func (m *GenesisState) GetDeveloperFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DeveloperFees
	}
	return nil
}

func (m *GenesisState) GetLatestBlockHeight() uint64 {
	if m != nil {
		return m.LatestBlockHeight
	}
	return 0
}

func (m *GenesisState) GetDeveloperAddress() string {
	if m != nil {
		return m.DeveloperAddress
	}
	return ""
}

func (m *GenesisState) GetMaxPoolPointsPerBlock() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerBlock
	}
	return 0
}

func (m *GenesisState) GetMaxPoolPointsPerTx() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerTx
	}
	return 0
}

func (m *GenesisState) GetPointCountForBlock() uint64 {
	if m != nil {
		return m.PointCountForBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "osmosis.protorev.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("osmosis/protorev/v1beta1/genesis.proto", fileDescriptor_3c77fc2da5752af2)
}

var fileDescriptor_3c77fc2da5752af2 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x86, 0xe3, 0xdb, 0xde, 0xde, 0x76, 0xd2, 0x5b, 0xd1, 0x29, 0xa9, 0x9c, 0x00, 0x76, 0x30,
	0x2d, 0x64, 0x41, 0x6d, 0xb5, 0xc0, 0x86, 0x05, 0x52, 0x5d, 0x54, 0x60, 0x41, 0x15, 0xb9, 0x45,
	0x48, 0x2c, 0x18, 0xc6, 0xf1, 0x34, 0xb5, 0x6a, 0x7b, 0x2c, 0xcf, 0x24, 0xa4, 0x0f, 0xc0, 0x8a,
	0x0d, 0xcf, 0xc1, 0x9a, 0x87, 0xa8, 0xc4, 0xa6, 0x62, 0xc5, 0xca, 0xa0, 0xf6, 0x0d, 0xf2, 0x04,
	0xc8, 0x33, 0x93, 0xa4, 0x94, 0x98, 0x55, 0x3b, 0xe7, 0x7c, 0xe7, 0xff, 0xe7, 0x9c, 0x39, 0x0e,
	0xb8, 0x4b, 0x59, 0x4c, 0x59, 0xc8, 0x9c, 0x34, 0xa3, 0x9c, 0x66, 0xa4, 0xef, 0xf4, 0x37, 0x7d,
	0xc2, 0xf1, 0xa6, 0xd3, 0x25, 0x09, 0x61, 0x21, 0xb3, 0x45, 0x02, 0xea, 0x8a, 0xb3, 0x47, 0x9c,
	0xad, 0xb8, 0xc6, 0xf5, 0x2e, 0xed, 0x52, 0x11, 0x75, 0x8a, 0xff, 0x24, 0xd0, 0xb8, 0x57, 0xaa,
	0x3b, 0x16, 0x90, 0xe0, 0x7a, 0x39, 0x88, 0x33, 0x1c, 0x2b, 0xc3, 0x46, 0xbd, 0x23, 0x38, 0x24,
	0x8d, 0xe4, 0x41, 0xa5, 0x0c, 0x79, 0x72, 0x7c, 0xcc, 0xc8, 0xb8, 0xb8, 0x43, 0xc3, 0x44, 0xe6,
	0xad, 0xaf, 0xf3, 0x60, 0xf1, 0x99, 0x6c, 0x66, 0x9f, 0x63, 0x4e, 0xe0, 0x13, 0x30, 0x27, 0xb5,
	0x75, 0xad, 0xa9, 0xb5, 0xaa, 0x5b, 0x4d, 0xbb, 0xac, 0x39, 0xbb, 0x2d, 0x38, 0x77, 0xf6, 0x34,
	0x37, 0x2b, 0x9e, 0xaa, 0x82, 0x1f, 0x34, 0x50, 0xe3, 0xf4, 0x98, 0x24, 0x28, 0xc5, 0x61, 0x86,
	0x70, 0xe6, 0xa3, 0x8c, 0xf6, 0x38, 0x61, 0xfa, 0x3f, 0xcd, 0x99, 0x56, 0x75, 0xeb, 0x7e, 0xb9,
	0xde, 0x41, 0x51, 0xd6, 0xc6, 0x61, 0xb6, 0x9d, 0xf9, 0x9e, 0xa8, 0x71, 0xd7, 0x0a, 0xed, 0x61,
	0x6e, 0xde, 0x3c, 0xc1, 0x71, 0xf4, 0xd8, 0x9a, 0x2a, 0x6c, 0x79, 0x90, 0xff, 0x51, 0x09, 0xdf,
	0x81, 0x6a, 0xd1, 0x33, 0x0a, 0x48, 0x42, 0x63, 0xa6, 0xcf, 0x08, 0xf3, 0x3b, 0xe5, 0xe6, 0x2e,
	0x66, 0xe4, 0x69, 0xc1, 0xba, 0x0d, 0xe5, 0x09, 0xa5, 0xe7, 0x25, 0x15, 0xcb, 0x03, 0xfe, 0x08,
	0x63, 0x90, 0x80, 0xc5, 0x94, 0xd2, 0x08, 0xbd, 0x27, 0x61, 0xf7, 0x88, 0x33, 0x7d, 0x56, 0xcc,
	0x6b, 0xfd, 0x2f, 0xf3, 0xa2, 0x34, 0x7a, 0x2d, 0x61, 0xf7, 0x86, 0x32, 0x59, 0x91, 0x26, 0x97,
	0x85, 0x2c, 0xaf, 0x9a, 0x4e, 0x48, 0x88, 0x40, 0x3d, 0xc0, 0x27, 0x0c, 0xb1, 0x30, 0xe9, 0x10,
	0x14, 0xd3, 0xa0, 0x17, 0x11, 0xa4, 0xf6, 0x4f, 0xff, 0xb7, 0xa9, 0xb5, 0x66, 0xdd, 0xb5, 0x61,
	0x6e, 0x36, 0xa5, 0x50, 0x29, 0x6a, 0x79, 0xab, 0x45, 0x6e, 0xbf, 0x48, 0xbd, 0x14, 0x19, 0xf5,
	0xec, 0xf0, 0xa3, 0x06, 0x96, 0x02, 0xd2, 0x27, 0x11, 0x4d, 0x49, 0x86, 0x0e, 0x09, 0x61, 0xfa,
	0x9c, 0x98, 0x56, 0xdd, 0x56, 0xab, 0x54, 0x34, 0x3d, 0xee, 0x62, 0x87, 0x86, 0x89, 0xfb, 0x42,
	0x5d, 0xbf, 0xa6, 0x5c, 0x7f, 0x2b, 0xb7, 0x3e, 0xff, 0x30, 0x5b, 0xdd, 0x90, 0x1f, 0xf5, 0x7c,
	0xbb, 0x43, 0x63, 0xb5, 0x90, 0xea, 0xcf, 0x06, 0x0b, 0x8e, 0x1d, 0x7e, 0x92, 0x12, 0x26, 0x94,
	0x98, 0xf7, 0xff, 0xb8, 0x78, 0x97, 0x10, 0x06, 0xf7, 0xc0, 0x4a, 0x84, 0x39, 0x61, 0x1c, 0xf9,
	0x11, 0xed, 0x1c, 0xa3, 0x23, 0x31, 0x06, 0xfd, 0x3f, 0xd1, 0xa8, 0x31, 0xcc, 0xcd, 0x86, 0xb4,
	0x9c, 0x02, 0x59, 0xde, 0xb2, 0x8c, 0xba, 0x45, 0xf0, 0xb9, 0x88, 0x41, 0x04, 0x96, 0x27, 0xb7,
	0xc3, 0x41, 0x90, 0x11, 0xc6, 0xf4, 0xf9, 0xa6, 0xd6, 0x5a, 0x70, 0xb7, 0x4e, 0x73, 0x53, 0x1b,
	0xe6, 0xa6, 0x7e, 0xb5, 0x09, 0x85, 0x59, 0xdf, 0xbe, 0x6c, 0x2c, 0xa9, 0x11, 0x6c, 0xcb, 0x90,
	0x77, 0x6d, 0x4c, 0xa9, 0x08, 0x7c, 0x0b, 0xea, 0x31, 0x1e, 0x20, 0xf1, 0x82, 0x29, 0x0d, 0x13,
	0xce, 0x50, 0xa1, 0x21, 0x2e, 0xa6, 0x2f, 0x5c, 0x7d, 0x9f, 0x52, 0xd4, 0xf2, 0x6a, 0x31, 0x1e,
	0x14, 0x2b, 0xd2, 0x16, 0x99, 0x36, 0xc9, 0x44, 0x1b, 0xf0, 0x15, 0x58, 0x9d, 0x56, 0xc4, 0x07,
	0x3a, 0x10, 0xe2, 0xb7, 0x87, 0xb9, 0x79, 0xab, 0x5c, 0x9c, 0x0f, 0x2c, 0x0f, 0x5e, 0x55, 0x3e,
	0x18, 0xc0, 0x7d, 0x50, 0x13, 0x14, 0xea, 0xd0, 0x5e, 0xc2, 0xd1, 0x21, 0x1d, 0x5d, 0xb9, 0x2a,
	0x54, 0x9b, 0x93, 0x8f, 0x6e, 0x2a, 0x66, 0x79, 0x50, 0xc4, 0x77, 0x8a, 0xf0, 0x2e, 0x95, 0x77,
	0x75, 0xf7, 0x4e, 0xcf, 0x0d, 0xed, 0xec, 0xdc, 0xd0, 0x7e, 0x9e, 0x1b, 0xda, 0xa7, 0x0b, 0xa3,
	0x72, 0x76, 0x61, 0x54, 0xbe, 0x5f, 0x18, 0x95, 0x37, 0x0f, 0x2f, 0xed, 0x83, 0xfa, 0x40, 0x36,
	0x22, 0xec, 0xb3, 0xd1, 0xc1, 0xe9, 0x6f, 0x3e, 0x72, 0x06, 0x93, 0xdf, 0x39, 0xb1, 0x21, 0xfe,
	0x9c, 0x38, 0x3f, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0x74, 0x55, 0x9f, 0x06, 0x89, 0x05, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PointCountForBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PointCountForBlock))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxPoolPointsPerTx != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxPoolPointsPerTx))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxPoolPointsPerBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxPoolPointsPerBlock))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DeveloperAddress) > 0 {
		i -= len(m.DeveloperAddress)
		copy(dAtA[i:], m.DeveloperAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DeveloperAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.LatestBlockHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DeveloperFees) > 0 {
		for iNdEx := len(m.DeveloperFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeveloperFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DaysSinceModuleGenesis != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DaysSinceModuleGenesis))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.PoolWeights.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.BaseDenoms) > 0 {
		for iNdEx := len(m.BaseDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenPairArbRoutes) > 0 {
		for iNdEx := len(m.TokenPairArbRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairArbRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.TokenPairArbRoutes) > 0 {
		for _, e := range m.TokenPairArbRoutes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BaseDenoms) > 0 {
		for _, e := range m.BaseDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.PoolWeights.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.DaysSinceModuleGenesis != 0 {
		n += 1 + sovGenesis(uint64(m.DaysSinceModuleGenesis))
	}
	if len(m.DeveloperFees) > 0 {
		for _, e := range m.DeveloperFees {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LatestBlockHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LatestBlockHeight))
	}
	l = len(m.DeveloperAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.MaxPoolPointsPerBlock != 0 {
		n += 1 + sovGenesis(uint64(m.MaxPoolPointsPerBlock))
	}
	if m.MaxPoolPointsPerTx != 0 {
		n += 1 + sovGenesis(uint64(m.MaxPoolPointsPerTx))
	}
	if m.PointCountForBlock != 0 {
		n += 1 + sovGenesis(uint64(m.PointCountForBlock))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairArbRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairArbRoutes = append(m.TokenPairArbRoutes, TokenPairArbRoutes{})
			if err := m.TokenPairArbRoutes[len(m.TokenPairArbRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenoms = append(m.BaseDenoms, BaseDenom{})
			if err := m.BaseDenoms[len(m.BaseDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolWeights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysSinceModuleGenesis", wireType)
			}
			m.DaysSinceModuleGenesis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysSinceModuleGenesis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperFees = append(m.DeveloperFees, types.Coin{})
			if err := m.DeveloperFees[len(m.DeveloperFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeight", wireType)
			}
			m.LatestBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerBlock", wireType)
			}
			m.MaxPoolPointsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerTx", wireType)
			}
			m.MaxPoolPointsPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointCountForBlock", wireType)
			}
			m.PointCountForBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointCountForBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
